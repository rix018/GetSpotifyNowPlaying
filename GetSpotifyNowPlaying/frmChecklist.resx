<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF7THD9f1B17X9Udp1/W
        HcNf1h7RX9Ye0WDWHcRi3R6pWcgbf1fCG0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXdEcCl/UHXhg1h7VYNge/2HY
        Hv9g2B7/YNge/2DXHv9g2B7/ZeIg/1vMHf9KpRf/SqQX/0+wGNpVvhqBXdEcEAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF7THWZg1x7nYdge/2DY
        Hv9g1x7/YNce/2DXHv9g1x7/YNge/2XhH/9ayhz/SqQX/0uoGP9NrBj/S6cX/0qkF/9NrBjuVsIbcAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABf1R2oYNke/2DY
        Hv9g1x7/YNce/2DXHv9g1x7/YNce/2DYHv9k4h//Wsoc/0mkF/9Lpxj/Ta0Y/02sGP9NrBj/TawY/0uo
        GP9Joxf/UbUZs17UHAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABd0RwLX9YezWDY
        Hv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g2B7/ZeIf/1rLHP9KpBf/S6gX/02tGP9NrBj/TawY/02s
        GP9NrBj/TawY/02sGP9Joxf/Tq4Y2V7SHRUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGDW
        HtBg2B7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2ThH/9ayhz/SqQX/0uoF/9NrRj/TawY/02s
        GP9NrBj/TawY/02sGP9NrBj/TawY/02tGP9JpBf/Tq4Y3l7UHAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABf1R2qYdke/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DYHv9l4R//W8sc/0qkF/9Lpxj/Ta0Y/02s
        GP9NrBj/TawY/02sGP9NrBj/TawY/02sGP9NrBj/TawY/02tGP9Joxf/UbUZvAAAAAAAAAAAAAAAAAAA
        AAAAAAAAXtMdVmDYHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g2B7/ZOEf/1vKHP9KpBf/S6gY/02t
        GP9NrBj/TawY/02sGP9NrBj/TawY/02sGP9NrBj/TawY/02sGP9NrBj/TawY/02sGP9Joxf/VsIbaQAA
        AAAAAAAAAAAAAAAAAABg1x7zYNge/2DXHv9g1x7/YNce/2DXHv9g1x7/YNge/2TiH/9byxz/SaQX/0un
        GP9NrRj/TawY/02sGP9NrBj/TawY/06sGf9DqAr/R6kP/0+tGv9NrBj/TawY/02sGP9NrBj/TawY/0uo
        GP9NrBj9XdEcCAAAAAAAAAAAXtQda2HYHv9g1x7/YNce/2DXHv9g1x7/YNce/1/XHf9i4B3/Wsoc/0ql
        F/9Lpxj/Ta0Y/02sGP9NrBj/TqwZ/02sGP8/pwb/L6AA/0ysGP9PrRv/S6sX/02sGP9NrBj/TawY/02s
        GP9NrBj/Ta0Y/0mjF/9Vvhp/AAAAAAAAAABg1h7bYNge/2DXHv9g1x7/YNce/2DXHv9k2SL/VdkM/0K+
        AP8qlQD/LJkA/zKgAP81oQD/NKEA/zGfAP8voQD/MaIA/0+tHP+Txnf/+/H7/7fVpv8zowD/TKsW/02s
        GP9NrBj/TawY/02sGP9NrBj/S6cY/06wGOoAAAAAXtIdLmDYHv9g1x7/YNce/2DXHv9g1x7/YNce/0zT
        B/+e6HX/zuXB/6rUkv+Mymv/esFU/3C8R/9yvUn/gMRb/4/Gcv+106X/+Oz9///+///17PX/e75Y/zul
        BP9MrBf/TawY/02sGP9NrBj/TawY/02sGP9NrBj/SqUX/1fDGkBe1B12YNge/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/RNAA/6jnhv////////////////////////////////////////j////u///V387/j8Vw/zym
        BP8bmQD/NaMA/0eqEP9RrRz/TawY/02sGP9NrBj/Ta0Y/0ypGP9Joxb/WMUbhV/VHZ5g2B7/YNce/2DX
        Hv9g1x7/YNce/2HXH/9i2SD/SdQA/1C/Ev9qs0L/j8lu/6jXjf+x2pn/rdmV/5rQfP94vFH/Vq8k/yee
        AP8MlAD/O6UD/5rJff+006L/WLEn/0OoDf9NrBj/TawY/02tGP9MqRj/SaMX/1jGHP9i2x6uX9UdumDY
        Hv9g1x7/YNce/2DXHv9g1x7/Ydcg/1nVFf9s3C3/Zd0i/yuwAP8PjAD/CowA/wyOAP8LjQD/D48A/x6a
        AP85pQD/Y7Q3/5bIe//Z4dT///r////9//9vuUb/NaMA/02sGP9NrRj/TKkY/0mjF/9YxBv/ZeIg/2DY
        Hshg1h7JYNce/2DXHv9g1x7/YNce/2DXHv9R0wn/bNov////////////2PrG/7Tenv+i0oj/nNGB/6HU
        hv+u2Zb/tNOj/9Lezf//7/////z////2///V387/fb5b/0CnCf9IqhH/Tq0Z/0ypGP9Joxf/WMQb/2Xh
        H/9h2R7/X9Ye1GDWHslg2B7/YNce/2DXHv9g1x7/YNce/1XUDv9l2Sb/4PfT////////////////////
        ////////////////////+v///+///+Tl4/+z06H/gL9c/zymAv8WlwD/OKQA/z+nBf9KqBb/S6MZ/1jE
        G/9k4R//Ydke/2DXHv9g1h7UX9UduWDYHv9g1x7/YNce/2DXHv9g1x7/Ztgm/0rSAP88zgD/adkr/4vi
        W/+k6H7/t++Y/77rpf+016D/ptSM/4vEa/9wuUb/SqsT/x2aAP8QlQD/NqMA/32/WP/L377/pcuQ/0Gf
        Dv9Uwxb/ZOEf/2HZHv9g1h7/YNge/1/WHsdf1R2cYdge/2DXHv9g1x7/YNce/2HXIP9X1RL/btoy/37e
        SP9U1A3/OM0A/yvKAP8pywD/K8wA/xyrAP8OjAD/G5gA/yqfAP9EqQz/Z7c9/5jJff/L3ML/+u7////2
        ///+5v//Wsce/1jcD/9h2R7/YNYe/2DXHv9g2B7/X9Udq17UHXJg2B7/YNce/2DXHv9g1x7/WNUT/1nW
        Ff/z/O7///////P87v/a9sv/xPCt/7Trlf+v7oz/sfCP/7Hdmf+y0aH/w9i4/9jh1P/x6vX///H////v
        ////6P//2OPP/4zdX/9Y2xD/X9gc/2DWHv9g1x7/YNce/2HYHv9f1B2CXtIdKWDYHv9g1x7/YNce/2DX
        Hv9Y1RP/WdYV/+P42P/////////////////////////////////////////////y////7f///+3////p
        ///l5eX/weKu/4/cY/9U1g3/SNUA/2DXHv9h1x//YNce/2DXHv9g1x7/YNge/17THToAAAAAYNYe1mDY
        Hv9g1x7/YNce/2HXIP9X1RP/XdYb/4ziXf+s6or/x/Gv/9r1y//o+d7/8Pvq//H76//q+eH/zOO+/7vf
        pv+p34v/kNxl/2zZL/9L1QD/RtQA/1nWFP9i1yD/YNce/2DXHv9g1x7/YNce/2DYHv9g1h7kAAAAAAAA
        AABe0x1iYdge/2DXHv9g1x7/YNce/2PYIv9Y1RL/RtEA/0PQAP9J0QD/U9ML/13WGv9j1yL/ZNcj/1/X
        Hf9X1hH/TtUD/0jUAP9H1AD/U9YL/1/XHP9h1x//YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNge/1/U
        HXUAAAAAAAAAAAAAAABg1h7sYNge/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/1/XHP9c1hj/WNUS/1bV
        D/9V1A//V9UR/1vXF/9e1xz/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DY
        Hv9g1x73XdEcAwAAAAAAAAAAAAAAAF7THUth2B7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNke/17THV0AAAAAAAAAAAAAAAAAAAAAAAAAAF/VHZxh2R7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2HZHv9f1R2uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGDWHsRg2R7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g2B7/YNYe0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXdAcAl/W
        Hb9g2R7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g1x7/Ydge/2DWHsxd0RwLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF/VHZhg2B7/YNge/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g1x7/YNge/2DZHv9f1R2kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF7THVZg1x7aYdge/2DYHv9g1x7/YNce/2DXHv9g1x7/YNce/2DX
        Hv9g1x7/YNce/2DXHv9g1x7/YNge/2DYHv9g1x7hXtMdYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABe1B1oX9Yex2DYHv9g2B7/YNge/2HY
        Hv9g2B7/YNge/2HYHv9g2B7/YNge/2DYHv9f1h7MXtQdb13RHAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXtIcLl7U
        HWxf1R2YX9UdtV/WHcZf1h3HX9Udtl/VHZpe1B1wXtIcMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/+AH//8AAP/+AAB//AAAH/AAAA/wAAAH4AAAB8AAAAPAAAABgAAAAYAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAHAAAABwAAAA+AA
        AAfwAAAP8AAAD/wAAD/+AAB//4AA///gB/8=
</value>
  </data>
</root>